Please create a system design challenge for a simple chat application. The challenge should guide users through designing a chat application that allows users to send and receive messages in real-time. It should progressively introduce features and complexities such as user authentication, chat rooms, message persistence, and basic moderation.

The challenge should be structured as a TypeScript object conforming to the following type definitions:

typescript
Copy code
type Challenge = {
  slug: string;
  title: string;
  description: string;
  difficulty: "Easy" | "Medium" | "Hard";
  stages: Stage[];
  generalLearnings: string[];
};

type Stage = {
  problem: string;
  requirements: string[];
  metaRequirements: string[];
  hintsPerArea: {
    requirements: {
        functional: string[];
        nonFunctional: string[];
    }
    systemAPI: string[];
    capacityEstimations: {
        traffic: string[]
        storage: string[]
        memory: string[]
        bandwidth: string[]
    };
    highLevelDesign: string[];
  };
  criteria: string[];
  learningsInMD: string;
}
Instructions:

The first stage should define the initial user need for the application.

Subsequent stages should present problems that users are facing, which the system designer needs to address.

For each stage, include:

Problem: A user-facing issue or requirement that needs to be solved.
Requirements: Instructions or guidelines provided by the product manager.
HintsPerArea: Provide hints for the following areas:
Functional and Non-Functional Requirements
System API Design
Capacity Estimations
High-Level Design
Criteria: Success criteria that define when the problem is considered solved. Make sure that criteria is cumulative per stage, in a sense that the prior stages are required for the current stage to pass. Also make sure to use the "requirements" prop to build the "criteria", because I use "criteria" to evaluate the solution provided by the user.
metaRequirements: is the cumulative requirements overtime without collision, they represent the status of the application so far up-till this point of the challenge. And make sure that you remove the overwritten previous requirements. Where if 2 requirements collide, overwrite it with the newer one.
LearningsInMD: Key learnings in Markdown format, focusing on system design concepts the user will learn.
The "requirements" section should include specific instructions or guidelines from the product manager, such as required features, constraints, or priorities.

The challenge should be suitable for beginners in system design, keeping the content clear and concise.

Focus on teaching fundamental system design principles through practical problem-solving.

I want this challenge to be simple as an introductory for users, grow with complexity step by step, by adding new concepts to the challenge.

if you specify the number of users, then mention it in the requirements and meta requirements

I want you to focus on system design concepts. Users are more here to learn about system design.

If we tackled a concept in one of the stages, then no need to touch on it again.

I want to have 1 to 2 requirements in each stage, no more. if they are similar, just combine them and no need to add another one.

While designing the challenge we need to shed the lights on various system design concepts, like Caching, Load balancer, Database, Availability, CAP theorem, Software design pattern, Microservices, Scalability, Message queues, Optimization, Proxies and Security. No need to apply them all in this challenge, but at least a couple of them without focusing only on one.